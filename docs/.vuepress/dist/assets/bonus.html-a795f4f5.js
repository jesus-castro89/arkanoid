import{_ as n,o as s,c as a,e}from"./app-08222125.js";const p={},t=e(`<h1 id="actualizando-bonus" tabindex="-1"><a class="header-anchor" href="#actualizando-bonus" aria-hidden="true">#</a> Actualizando Bonus</h1><p>Ante lo que hemos hecho, es momento de agregar un tipo enumerado al paquete <code>graphics.bonus</code> y modificar la clase Bonus.</p><h2 id="bonustype" tabindex="-1"><a class="header-anchor" href="#bonustype" aria-hidden="true">#</a> BonusType</h2><p>Este enum funciona de la misma manera que <code>BorderType</code>, por consiguiente el Enum, quedaría de la siguiente forma:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">graphics<span class="token punctuation">.</span>bonus</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">BonusType</span> <span class="token punctuation">{</span>

    <span class="token function">LASER</span><span class="token punctuation">(</span><span class="token string">&quot;Laser.gif&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ENLARGE</span><span class="token punctuation">(</span><span class="token string">&quot;Enlarge.gif&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SMALL</span><span class="token punctuation">(</span><span class="token string">&quot;Small.gif&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">PLAYER</span><span class="token punctuation">(</span><span class="token string">&quot;Player.gif&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> imageName<span class="token punctuation">;</span>

    <span class="token class-name">BonusType</span><span class="token punctuation">(</span><span class="token class-name">String</span> imageName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>imageName <span class="token operator">=</span> imageName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getImageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> imageName<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>En este ejemplo se agregaron solo 4 tipos, pero tú puedes agregar más si así lo deseas.</p><h2 id="bonus" tabindex="-1"><a class="header-anchor" href="#bonus" aria-hidden="true">#</a> Bonus</h2><p>En este caso agregaremos un tipo a los Bonus y modificaremos el constructor para que quede de la siguiente forma:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">graphics<span class="token punctuation">.</span>bonus</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">graphics<span class="token punctuation">.</span></span><span class="token class-name">Sprite</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">util<span class="token punctuation">.</span></span><span class="token class-name">Moveable</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bonus</span> <span class="token keyword">extends</span> <span class="token class-name">Sprite</span> <span class="token keyword">implements</span> <span class="token class-name">Moveable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> yam<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> taken<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">BonusType</span> type<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Bonus</span><span class="token punctuation">(</span><span class="token class-name">BonusType</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">super</span><span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">getImageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>yam <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>taken <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Como puedes ver, ahora no pedimos el nombre del Bonus sino su tipo y con base a ello es que trabajamos.</p>`,10),o=[t];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","bonus.html.vue"]]);export{r as default};
